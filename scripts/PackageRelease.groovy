/*******************************************************************************
 Â© 2011 SunGard Higher Education.  All Rights Reserved.

 CONFIDENTIAL BUSINESS INFORMATION

 THIS PROGRAM IS PROPRIETARY INFORMATION OF SUNGARD HIGHER EDUCATION
 AND IS NOT TO BE COPIED, REPRODUCED, LENT, OR DISPOSED OF,
 NOR USED FOR ANY PURPOSE OTHER THAN THAT WHICH IT IS SPECIFICALLY PROVIDED
 WITHOUT THE WRITTEN PERMISSION OF THE SAID COMPANY
 *******************************************************************************/
import org.apache.ivy.core.report.ArtifactDownloadReport
import org.codehaus.groovy.grails.resolve.IvyDependencyManager

/**
 * Gant script for creating a release package for a banner module.
 * The release package contains an 'installer/systool' that is used 
 * to manage product homes and to re-generate the war file with 
 * environment specific configuration and overrides (localization message bundles, CSS, JavaScript).
 **/
 
//scriptScope = BuildScope.WAR
scriptEnv = "production"
 
includeTargets << grailsScript( "_GrailsPackage" )
includeTargets << grailsScript( "_GrailsWar" )

target( default:"Package Release" ) {
    
//	depends( checkVersion,createConfig,war )
	depends( checkVersion, createConfig, war )
    event( "PackageReleaseStart", [] )

	File templateZip = getTemplateHomeZip()

    File installerZip = new File( "${basedir}/release-${metadata.'app.name'}-${metadata.'app.version'}.zip" )
    ant.delete( file:installerZip )

	def stagingDir = new File( "${projectWorkDir}/installer-staging" )
	ant.delete( dir:stagingDir )
	ant.mkdir( dir:stagingDir )
	ant.unzip( src:templateZip, dest:stagingDir )
	
	File customDir = new File( "${basedir}/src/installer")	
	if (customDir.exists()) {
		ant.copy( todir:"${stagingDir}/installer", overwrite:true ) {
			fileset( dir:"${customDir}", includes:"**/*" )
		}
	}
	
	ant.mkdir( dir:"${stagingDir}/i18n" )
	ant.copy( todir:"${stagingDir}/i18n" ) {
		fileset( dir:"${basedir}/grails-app/i18n", includes:"**/*" )
	}
	insertVersion( new File( "${stagingDir}/i18n/release.properties") )
	ant.mkdir( dir:"${stagingDir}/webapp" )
	ant.copy( todir:"${stagingDir}/webapp" ) {
		fileset( dir:"${basedir}/target", includes:"*.war" )
	}
	
	ant.mkdir( dir:"${stagingDir}/config" )
	ant.copy( todir:"${stagingDir}/config" ) {
		fileset( dir:"${basedir}/", includes:"*_configuration.example" )
	}

	ant.zip( destfile:installerZip ) {
		fileset( dir:stagingDir )
	}

    ant.delete( dir:stagingDir )

    event( "PackageReleaseEnd", [] )
}


private void insertVersion( File target ) {
    
	// This method uses a 'build number' web service to retrieve the next build number 
    // for the project.  Each project is assigned a UUID (manually), and this UUID is 
    // supplied to the web service to identify which 'build number sequence' to increment 
    // and return. The project's UUID, and the URL to the service, are 
    // found in the project's configuration. 
    // 
    def appName    = "${metadata.'app.name'}"
    def appVersion = "${metadata.'app.version'}"
    
//    def config = new ConfigSlurper().parse( new File( "${basedir}/grails-app/conf/Config.groovy" ).toURL() )
    def uuid = config.build.number.uuid
    def url  = config.build.number.base.url + uuid 
    
    def buildNumberProperty  = url.toURL().getText()
    def extractedBuildNumber = (buildNumberProperty =~ /[\d]+/).collect { it }[0]
    
    def content = """#This file is automatically generated and contains release specific properties.  
                     |#This file MUST not be changed. 
                     |#
                     |#  ****** DO NOT EDIT OR TRANSLATE THIS FILE. ******* 
                     |#
                     |#******************************************************
                     |#*             Version and Build Number               *
                     |#**************************************************** */
                     |
                     |application.name=$appName
                     |application.version=$appVersion
					 |application.build.number=$extractedBuildNumber
                     |application.build.time='${new Date()}'
                     |
                     |""".stripMargin()
    
    target.write content
}


private File getTemplateHomeZip() {
    
	//The template home dir is a zipped distro within the plugin directory.  We have to find the plugin dir.
	File zip = null
	pluginSettings.getPluginInfos().each() {
		if (it.name.equals( "banner-packaging" )) {
			zip = new File( it.pluginDir.getFile(), "template.zip" )
		}
	}
	if (zip == null) {
		throw new Exception( "Template home zip could not be found" )
	}
	zip
}

