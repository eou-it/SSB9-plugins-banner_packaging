buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.14.2"
    }
}

version "9.26"
group "banner.packaging"

apply plugin:"eclipse"
apply plugin:"idea"

apply plugin:"org.grails.grails-plugin"
apply plugin:"org.grails.grails-plugin-publish"
apply plugin:"asset-pipeline"
apply plugin:"org.grails.grails-gsp"

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    provided  "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:gsp"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web-plugin"
    provided "org.grails:grails-plugin-services"
    provided "org.grails:grails-plugin-domain-class"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:2.14.6"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.grails:grails-plugin-testing"
    testCompile "org.grails:grails-web-testing-support"
}

bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always')
    systemProperties(System.properties)
    addResources = true
}

grails
        {
            native2asciiAnt = true
            native2ascii = false
        }

// enable if you wish to package this plugin as a standalone application
bootRepackage.enabled = false
grailsPublish {
    // TODO: Provide values here
    user = 'user'
    key = 'key'
    githubSlug = 'foo/bar'
    license {
        name = 'Apache-2.0'
    }
    title = "My Plugin"
    desc = "Full plugin description"
    developers = [johndoe:"John Doe"]
}


assets {
    minifyJs = true
    minifyCss = true
}


task startpackaging {
    doFirst {

        println  "startpackaging Pre Processing"

        String appRoot = System.getProperty("user.dir")
        System.setProperty("user.dir","$appRoot/plugins/banner_packaging.git")
        def pathToFolderOfScript = 'src/main/scripts/Package-Release.groovy'
        new GroovyShell().run(file(pathToFolderOfScript))
        //gse.run('Package-Release.groovy', new Binding())

    }


    doLast {

        println "startpackaging Post Processing"
    }
}

// example on how to invoke Groovy Script from Gradle task
/*task selfservicepackaging {
    assets.minifyJs = false
    assets.minifyCss = false
    String appRoot;

    doFirst {
        appRoot = System.getProperty("user.dir");
        println(">>>>>>>>>>>>>>>>>>>>>>>  pluginDirectory is " + appRoot)
        println "selfservicepackaging Pre Processing"

        println " App root is >>>>>>>>> " + appRoot

        println(">>>>>>>>>>>>>>>>>>>>>>>  pluginDirectory is " + appRoot)
        def pathToFolderOfScript = 'src\\main\\scripts\\selfservice-packaging.groovy'
        new GroovyShell().run(file(pathToFolderOfScript))

    }
}
*/

//uncomment this while running Package-Release  target

task clearbuildfolders{
    def ant = new groovy.util.AntBuilder()
    String appRoot = System.getProperty("user.dir")
    System.setProperty("appRoot",appRoot)
    //below condition won't allow to run from banner_packaging.git plugin
    if(!appRoot.endsWith("banner_packaging.git")){
        File pluginRoot = new File(appRoot + "/plugins")
        File[] files = pluginRoot.listFiles()
        for (File file : files) {
            if (file.isDirectory()) {
                System.out.println("directory:" + file.getCanonicalPath())
                println "    ......... Deleting contents of ::" + file.getCanonicalPath() + "\\build"
                if( (new File(file.getCanonicalPath() + "\\build")).exists()){
                    ant.delete(dir: file.getCanonicalPath() + "\\build")
                }


            }
        }

        if((new File(appRoot+"\\build")).exists()){
            ant.delete(dir: appRoot+"\\build", failonerror: false)
        }
    }


}



assets {
    packagePlugin = true
}