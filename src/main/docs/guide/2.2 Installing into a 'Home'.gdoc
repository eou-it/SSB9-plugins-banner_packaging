
Banner 9 web applications are modular and are installed independently from each other (albeit they may share 'common' configuration). Since this plugin provides a common structure for release packages as well as a common installer, the product home directory structures subsequently created are consistent across all Banner 9 modules. 

It is +highly recommended+ product homes for Banner 9 modules within a particular environment be placed in sibling directories.  As an example, the following directory structure shows two product homes and a shared_configuration directory that all support a common 'TEST' environment.  
{code}
banner9_product_homes_TEST
    |--> catalog_schedule_TEST 
    |--> events_home_TEST 
    |--> shared_configuration_TEST    
{code}

Note the names of the homes is not restricted, and must be input when prompted to do so by the installer.  If an identified home (or the directory for shared configuration) does not exist, it will be created by the installer. 


The following steps illustrate installing the solution into a product (aka 'deployment') home:


h4. Extract the release package into a temporary location
{code}
$ rm -rf temp/
$ mkdir temp
$ cd temp/
temp $ cp /Users/bart/working/horizon/banner_on_grails/release-banner_on_grails-0.2.0.zip .
temp $ unzip release-banner_on_grails-0.2.0.zip 
Archive:  release-banner_on_grails-0.2.0.zip
   creating: config/
   creating: i18n/
   creating: installer/
   creating: installer/apache-ant-1.8.2/
   ... lengthy logging removed ...
{code}

_If you manually create a home directory, or have already installed a previous version of a module and thus already have a home, you may find it convenient to create a 'temp-extraction' subdirectory within the home.  This is simply a way to ensure temp extraction directories are easily associated with homes. When extracting the release package into a temporary subdirectory of the home in which you will install the release, the installer will simply ignore the temporary directory._



h4. Prepare the installer
The installer contained within the release package has no dependencies other than the JVM.  There is no requirement to install groovy, or have Grails.  The 'Ant' build tool is used to prepare the installer, and is included within the release package.  The use of 'ant' to prepare the installer requires the user to run 'ant', as shown below:
_Note: You may need, depending upon your system, to ensure the 'ant' file is executable (e.g., 'chmod +x ant')_
{code}
temp $ cd installer
temp/installer $ ant
Buildfile: /Users/bart/working/horizon/product_homes/catalog_schedule_deployment/temp/installer/build.xml

_checkInstallerMarker:

jar:
    [mkdir] Created dir: /Users/bart/working/horizon/product_homes/catalog_schedule_deployment/temp/installer/staging.dir
     [copy] Copying 16 files to /Users/bart/working/horizon/product_homes/catalog_schedule_deployment/temp/installer/staging.dir/i18n
     [copy] Copying 1 file to /Users/bart/working/horizon/product_homes/catalog_schedule_deployment/temp/installer/staging.dir/i18n
     [copy] Copying 4 files to /Users/bart/working/horizon/product_homes/catalog_schedule_deployment/temp/installer/staging.dir
      [jar] Building jar: /Users/bart/working/horizon/product_homes/catalog_schedule_deployment/temp/installer/systool.jar
   [delete] Deleting directory /Users/bart/working/horizon/product_homes/catalog_schedule_deployment/temp/installer/staging.dir

create.installer.script:
    [mkdir] Created dir: /Users/bart/working/horizon/product_homes/catalog_schedule_deployment/temp/installer/logs
    [touch] Creating /Users/bart/working/horizon/product_homes/catalog_schedule_deployment/temp/installer/logs/installer.log

create.systool.script:

create.scripts:

create-spring-properties:
[propertyfile] Creating new property file: /Users/bart/working/horizon/product_homes/catalog_schedule_deployment/temp/installer/spring/context.properties

all:

BUILD SUCCESSFUL
Total time: 4 seconds
{code}


h4. Install into a 'Home'
Once the installer has been prepared (using 'ant' as shown above), it may be used to 'install' the release into a product home: 
{code}
temp/installer $ bin/install home

Enter the full path to the module home. 
   The module will be installed within the 'current' subdirectory within this home, 
   and the previous release will be archived.

 ==> []: /Users/chardt/working/horizon/product_homes/catalog_schedule_deployment

Enter the full path to the 'shared configuration' home.  
   Banner 9 modules configured to refer to this home will 
   share the configuration specified here.

 ==> []: /Users/chardt/working/horizon/product_homes/shared_configuration
InstallHome ... 


    ______                                    ____  
   (____  \                                  / __ \ 
    ____)  ) ____ ____  ____   ____  ____   ( (__) )
   |  __  ( / _  |  _ \|  _ \ / _  )/ ___)   \__  / 
   | |__)  | ( | | | | | | | ( (/ /| |         / /  
   |______/ \_||_|_| |_|_| |_|\____)_|        /_/
        


OK
10:30 tion-area/installer $ 
{code} 



h4. 'Home Directory' Structure 
A product home is created for each 'deployment'.  For example, the 'home' used to manage a module within a 'TEST' environment is a different 'home' than what is used within a 'PROD' environment.  A client may have many homes for the same solution, if supporting many different environments.  This provides the needed flexibility with respect to configuration, release level, and even client modifications. 

A product home is one that is used to support configuration and creation of a deployable war file. In a subsequent release, this plugin will be extended to support the installation of a 'development home' that will support building from source code (that is managed within a Git repository clone). 

The following directory tree shows the product home that was created using the steps above for the TEST environment.  Please note that in addition to the module's product home, there is a separate 'shared_configuration_TEST' home that contains cross-module configuration for the TEST environment. Currently this directory holds a single file (banner_configuration.groovy) containing shared JNDI DataSource configuration. 
{code}
banner_TEST_homes/                      (optional and recommended top-level directory for all homes)

|--> catalog_schedule_TEST/             (product home for 'catalog-schedule' in TEST environment)
    |--> current
        |--> instance/                  (instance-specific configuration that will not be overwritten)
           |--> config/
              |--> {app-name}_config.groovy (module-specific configuration for CAS, logging, etc.)
           |--> lib
              |--> ojdbc8.jar  (the Oracle database driver that must be placed manually into the tomcat/lib directory)
                    ----- Update on above  THIS IS NOT REQUIRED WITH TOMCAT-8 since the
                        --- --jar could be supplied through app-specific web-inf lib folder     -----
              |--> logging.properties   (logging configuration that may be copied to the WEB-INF/classes directory that is 
                                         very useful if the war file cannot be deployed successfully.)
           |--> i18n                    (new or replacement message bundles that should be added the war) 
           |--> css                     (new or replacement css files that should be added the war) 
           |--> js                      (new or replacement javascript files that should be added the war) 
        |--> i18n/                      (contains message bundles that may reflect changes not yet in 'baseline')
        |--> dist/                      (contains the war file, after it is creating using the 'systool') 
        |--> installer/                 (contains the installer)
    |--> archived-releases/             (directory for previous releases)
        |-->           

|--> shared_configuration_TEST/         (home for configuration files shared across modules within an environment)
    |--> banner_configuration.groovy    (a 'shared' configuration file containing dataSource)
{code} 



\\
\\
\\
